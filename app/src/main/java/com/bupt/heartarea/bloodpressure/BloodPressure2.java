package com.bupt.heartarea.bloodpressure;

import android.util.Log;

import com.bupt.heartarea.utils.MathUtil;

import java.util.ArrayList;
import java.util.List;

public class BloodPressure2 {

    private static List<Double> hBPList = new ArrayList<>();
    private static List<Double> lBPList = new ArrayList<>();

    public static int[] cal(double[] data) {
        //  System.out.println ("here");
        List<Point> points = new ArrayList<Point>();

        //ArrayList<Integer> samples = new ArrayList<Integer>();
        //data是未处理的原始数据
        // double[] data={4.3952, 4.4003, 4.4051, 4.4092, 4.4121, 4.4129, 4.4113, 4.4076, 4.4035, 4.4006, 4.4, 4.4014, 4.4037, 4.4063, 4.409, 4.412, 4.4148, 4.4165, 4.4157, 4.4122, 4.4074, 4.4031, 4.4011, 4.4015, 4.4035, 4.4061, 4.4087, 4.4114, 4.414, 4.4158, 4.4157, 4.4131, 4.4089, 4.4047, 4.4023, 4.4021, 4.4035, 4.4056, 4.4079, 4.4102, 4.4124, 4.4138, 4.4134, 4.4105, 4.4059, 4.4013, 4.3983, 4.3975, 4.3985, 4.4002, 4.4021, 4.4041, 4.4063, 4.4081, 4.4081, 4.4055, 4.4008, 4.3953, 4.3911, 4.3894, 4.39, 4.3924, 4.3957, 4.3991, 4.4017, 4.4025, 4.4007, 4.3964, 4.3912, 4.3874, 4.3864, 4.3881, 4.3915, 4.3953, 4.3987, 4.4018, 4.4042, 4.405, 4.4035, 4.3998, 4.3955, 4.3924, 4.3919, 4.3938, 4.397, 4.4004, 4.4038, 4.4071, 4.4101, 4.4118, 4.4111, 4.4077, 4.4028, 4.3985, 4.3966, 4.3976, 4.4003, 4.4033, 4.406, 4.4086, 4.4117, 4.4149, 4.4169, 4.4163, 4.4127, 4.4073, 4.4025, 4.4002, 4.4009, 4.4035, 4.4066, 4.4094, 4.4121, 4.4151, 4.4182, 4.4202, 4.4198, 4.4165, 4.4116, 4.4072, 4.405, 4.4057, 4.4083, 4.4112, 4.4139, 4.4163, 4.4192, 4.4223, 4.4243, 4.4236, 4.4198, 4.4138, 4.408, 4.4046, 4.4044, 4.4065, 4.4091, 4.4112, 4.413, 4.4152, 4.4183, 4.4213, 4.4223, 4.42, 4.4146, 4.4082, 4.4035, 4.402, 4.4035, 4.4064, 4.4092, 4.4113, 4.4136, 4.4167, 4.4202, 4.4225, 4.4217, 4.4172, 4.4104, 4.4039, 4.4004, 4.4007, 4.4037, 4.4074, 4.4102, 4.412, 4.4139, 4.4169, 4.4206, 4.4233, 4.4229, 4.4184, 4.411, 4.4033, 4.3983, 4.3972, 4.3991, 4.4021, 4.4047, 4.4067, 4.4089, 4.4121, 4.4157, 4.418, 4.4172, 4.4128, 4.406, 4.3996, 4.3958, 4.3954, 4.3974, 4.4003, 4.4029, 4.4051, 4.4076, 4.4108, 4.4136, 4.4143, 4.4116, 4.4057, 4.3987, 4.3937, 4.3924, 4.3945, 4.3981, 4.4015, 4.4039, 4.4059, 4.4085, 4.4115, 4.4135, 4.4124, 4.4077, 4.4008, 4.3945, 4.3912, 4.3915, 4.3944, 4.3978, 4.4005, 4.4028, 4.4057, 4.4094, 4.4126, 4.4134, 4.4106, 4.4046, 4.3979, 4.3935, 4.3927, 4.3952, 4.399, 4.4025, 4.405, 4.4073, 4.4105, 4.4149, 4.4188, 4.4202, 4.4176, 4.4112, 4.4036, 4.3979, 4.3962, 4.3984, 4.4026, 4.4066, 4.4096, 4.4123, 4.416, 4.4209, 4.4255, 4.4274, 4.4248, 4.4183, 4.4106, 4.4051, 4.4038, 4.4062, 4.4102, 4.4137, 4.416, 4.4181, 4.421, 4.4246, 4.427, 4.4262, 4.4213, 4.4137, 4.4065, 4.4024, 4.4025, 4.4054, 4.4091, 4.4121, 4.4144, 4.4171, 4.4203, 4.4231, 4.4233, 4.4195, 4.4124, 4.4046, 4.3993, 4.3981, 4.4007, 4.4048, 4.4086, 4.4112, 4.4137, 4.417, 4.4207, 4.4233, 4.4217, 4.4166, 4.4091, 4.3997, 4.3929, 4.3909, 4.403, 4.4217};
        // double[] data={4.4453, 4.4469, 4.4485, 4.4504, 4.4528, 4.4552, 4.4568, 4.4567, 4.4546, 4.4512, 4.4481, 4.4465, 4.447, 4.4488, 4.4511, 4.4531, 4.455, 4.4571, 4.4596, 4.4618, 4.4628, 4.4615, 4.4582, 4.4539, 4.4505, 4.4491, 4.45, 4.4523, 4.4549, 4.4572, 4.4594, 4.4617, 4.4643, 4.4662, 4.4665, 4.4643, 4.46, 4.455, 4.4511, 4.4495, 4.4502, 4.4522, 4.4543, 4.4561, 4.4578, 4.4602, 4.463, 4.4656, 4.4664, 4.4646, 4.4603, 4.455, 4.4505, 4.4483, 4.4484, 4.4499, 4.4516, 4.4528, 4.454, 4.4556, 4.4578, 4.4598, 4.4603, 4.4585, 4.4544, 4.4495, 4.4455, 4.4435, 4.4435, 4.4448, 4.4461, 4.4472, 4.4481, 4.4497, 4.4519, 4.4543, 4.4554, 4.4543, 4.4508, 4.4461, 4.4418, 4.4395, 4.4394, 4.4409, 4.4428, 4.4443, 4.4456, 4.4472, 4.4494, 4.452, 4.4539, 4.4537, 4.4511, 4.4469, 4.4425, 4.4396, 4.4388, 4.4399, 4.4417, 4.4435, 4.4451, 4.4469, 4.4491, 4.4513, 4.4524, 4.4515, 4.4483, 4.444, 4.44, 4.4377, 4.4375, 4.4388, 4.4407, 4.4425, 4.4443, 4.4466, 4.4493, 4.4516, 4.4523, 4.4506, 4.4466, 4.4419, 4.4382, 4.4367, 4.4376, 4.4397, 4.4421, 4.4442, 4.4464, 4.4491, 4.4524, 4.4552, 4.4563, 4.4546, 4.4503, 4.4449, 4.4406, 4.4388, 4.4395, 4.4416, 4.444, 4.4459, 4.4475, 4.4497, 4.4527, 4.4557, 4.4575, 4.4566, 4.453, 4.448, 4.4436, 4.4415, 4.442, 4.4442, 4.4468, 4.4488, 4.4503, 4.4521, 4.4547, 4.4579, 4.4604, 4.4611, 4.4591, 4.4551, 4.4506, 4.4475, 4.4467, 4.4479, 4.45, 4.4521, 4.4538, 4.4556, 4.4582, 4.4613, 4.4638, 4.4644, 4.4622, 4.4577, 4.4526, 4.449, 4.4479, 4.4491, 4.4513, 4.4534, 4.455, 4.4565, 4.4586, 4.4615, 4.464, 4.4646, 4.4625, 4.4579, 4.4526, 4.4487, 4.4475, 4.4488, 4.4514, 4.454, 4.4561, 4.458, 4.4603, 4.4634, 4.4663, 4.4677, 4.4663, 4.4623, 4.4569, 4.4522, 4.4499, 4.4503, 4.4524, 4.4549, 4.4569, 4.4584, 4.4601, 4.4627, 4.466, 4.4689, 4.4701, 4.4686, 4.4645, 4.4593, 4.4549, 4.4528, 4.4532, 4.4553, 4.4579, 4.4601, 4.4619, 4.4639, 4.4668, 4.4705, 4.4737, 4.4751, 4.4736, 4.4694, 4.4641, 4.4599, 4.4582, 4.4589, 4.461, 4.4632, 4.4648, 4.4663, 4.4686, 4.4718, 4.4748, 4.4761, 4.4746, 4.4704, 4.4651, 4.4607, 4.4589, 4.4595, 4.4617, 4.4641, 4.466, 4.4677, 4.4699, 4.4728, 4.4755, 4.4767, 4.4752, 4.4709, 4.4652, 4.4603, 4.4576, 4.4575, 4.4589, 4.4608, 4.4623, 4.4638, 4.4657, 4.4684, 4.4711, 4.4724, 4.4712, 4.4674, 4.462, 4.4572, 4.4545, 4.4543, 4.4558, 4.458, 4.4598, 4.4612, 4.463, 4.4655, 4.4686, 4.4711, 4.4714, 4.4689, 4.4642, 4.4584, 4.4549, 4.4546, 4.4546, 4.4551, 4.4556, 4.4664, 4.4823};
//        double[] data = {4.4194, 4.4156, 4.4159, 4.4186, 4.4209, 4.4222, 4.4113, 4.3905, 4.3669, 4.3688, 4.3767, 4.3799, 4.3827, 4.3847, 4.3871, 4.3914, 4.3976, 4.3989, 4.3934, 4.3681, 4.3424, 4.3614, 4.3646, 4.3692, 4.3737, 4.3752, 4.3798, 4.3814, 4.3877, 4.3877, 4.3908, 4.3727, 4.3446, 4.3468, 4.3967, 4.4067, 4.4217, 4.4206, 4.4058, 4.4045, 4.4013, 4.4097, 4.4203, 4.4137, 4.3689, 4.3588, 4.3641, 4.366, 4.3717, 4.3716, 4.3719, 4.3737, 4.3816, 4.3842, 4.3912, 4.3956, 4.3734, 4.3572, 4.3509, 4.3529, 4.3736, 4.3766, 4.3774, 4.3826, 4.3873, 4.3963, 4.4008, 4.4081, 4.4047, 4.368, 4.3619, 4.363, 4.3772, 4.3864, 4.3873, 4.3869, 4.3868, 4.3866, 4.387, 4.3953, 4.399, 4.3763, 4.3617, 4.3571, 4.3652, 4.3771, 4.3811, 4.3835, 4.3849, 4.39, 4.3935, 4.399, 4.4013, 4.38, 4.3642, 4.3637, 4.3688, 4.3788, 4.3817, 4.3811, 4.3824, 4.3867, 4.3912, 4.3966, 4.3996, 4.3809, 4.3635, 4.3569, 4.3629, 4.3722, 4.3771, 4.3803, 4.3799, 4.3844, 4.3876, 4.394, 4.397, 4.3933, 4.3744, 4.3553, 4.3573, 4.3672, 4.3715, 4.3763, 4.3767, 4.3777, 4.3797, 4.3847, 4.3887, 4.3957, 4.3937, 4.3599, 4.3532, 4.3605, 4.3818, 4.3901, 4.3927, 4.3951, 4.3957, 4.4015, 4.4044, 4.4113, 4.4145, 4.4117, 4.3924, 4.3715, 4.3751, 4.3863, 4.3914, 4.398, 4.4008, 4.403, 4.4062, 4.4132, 4.4169, 4.422, 4.4189, 4.3848, 4.3688, 4.3696, 4.3805, 4.3863, 4.3895, 4.3904, 4.394, 4.3976, 4.4052, 4.4089, 4.4153, 4.4056, 4.3745, 4.3731, 4.3848, 4.3916, 4.3984, 4.3984, 4.3986, 4.4005, 4.4099, 4.4131, 4.4205, 4.4178, 4.3802, 4.3726, 4.3818, 4.3884, 4.3997, 4.4022, 4.4026, 4.4043, 4.4102, 4.4144, 4.4206, 4.4225, 4.3963, 4.3783, 4.3774, 4.3829, 4.3939, 4.3968, 4.4005, 4.4008, 4.4058, 4.4086, 4.4141, 4.4171, 4.4127, 4.3937, 4.3706, 4.3731, 4.3848, 4.39, 4.3964, 4.397, 4.4, 4.4037, 4.4107, 4.4181, 4.4216, 4.4034, 4.3845, 4.3748, 4.3801, 4.3873, 4.3965, 4.4015, 4.4019, 4.4032, 4.41, 4.4172, 4.4212, 4.4273, 4.4255, 4.3902, 4.3807, 4.3881, 4.394, 4.4006, 4.407, 4.407, 4.408, 4.4101, 4.4172, 4.4225, 4.4252, 4.4088, 4.3906, 4.3827, 4.3912, 4.4035, 4.4077, 4.4103, 4.41, 4.4146, 4.4178, 4.4242, 4.4277, 4.4206, 4.4004, 4.3806, 4.3849, 4.3965, 4.4018, 4.4069, 4.4068, 4.4103, 4.4139, 4.4219, 4.4255, 4.4308, 4.4186, 4.3824, 4.3787, 4.3899, 4.3952, 4.4041, 4.4063, 4.4066, 4.4094, 4.4162, 4.4205, 4.4266, 4.4295, 4.3989, 4.3821, 4.383, 4.3886, 4.3995, 4.4043, 4.4071, 4.4106, 4.4236, 4.4287, 4.4377, 4.4402, 4.4273, 4.4147, 4.3796, 4.3815, 4.3859, 4.3898};
//double[] data={4.4197, 4.4171, 4.4171, 4.4195, 4.4234, 4.4274, 4.4308, 4.4339, 4.4365, 4.4383, 4.4383, 4.4354, 4.4294, 4.4216, 4.4142, 4.4094, 4.4082, 4.4098, 4.4126, 4.4153, 4.4177, 4.4203, 4.4237, 4.4276, 4.4303, 4.43, 4.426, 4.4192, 4.4123, 4.4078, 4.4068, 4.4085, 4.4114, 4.414, 4.4161, 4.4185, 4.4217, 4.4254, 4.4281, 4.428, 4.4241, 4.4174, 4.4102, 4.405, 4.403, 4.4037, 4.4059, 4.4083, 4.4106, 4.4134, 4.4169, 4.4204, 4.422, 4.4202, 4.4151, 4.4088, 4.4041, 4.4034, 4.4067, 4.412, 4.417, 4.4202, 4.422, 4.4238, 4.4268, 4.4308, 4.4344, 4.4355, 4.4328, 4.427, 4.4202, 4.4151, 4.4134, 4.4147, 4.4176, 4.4206, 4.4229, 4.4252, 4.4282, 4.4318, 4.4347, 4.4351, 4.4319, 4.4259, 4.4193, 4.4147, 4.4135, 4.4154, 4.4187, 4.4217, 4.4239, 4.426, 4.429, 4.4328, 4.4362, 4.4372, 4.4345, 4.4287, 4.4218, 4.4165, 4.4146, 4.4159, 4.4191, 4.4225, 4.4252, 4.4276, 4.4307, 4.4349, 4.4391, 4.4416, 4.4405, 4.4356, 4.4285, 4.4221, 4.4187, 4.4189, 4.4217, 4.4252, 4.4282, 4.4304, 4.433, 4.4367, 4.4414, 4.4457, 4.4476, 4.446, 4.441, 4.4346, 4.4291, 4.4265, 4.427, 4.4296, 4.4329, 4.4359, 4.4385, 4.4415, 4.4453, 4.4495, 4.4528, 4.4535, 4.4509, 4.4457, 4.4401, 4.4362, 4.4351, 4.4365, 4.439, 4.4415, 4.4435, 4.4456, 4.4484, 4.4517, 4.4543, 4.4546, 4.4518, 4.4464, 4.4405, 4.4361, 4.4344, 4.4352, 4.4375, 4.4399, 4.4419, 4.444, 4.4469, 4.4506, 4.4541, 4.4558, 4.4543, 4.4495, 4.443, 4.4371, 4.4338, 4.4336, 4.4355, 4.4382, 4.4404, 4.4422, 4.4443, 4.4475, 4.4513, 4.4542, 4.4545, 4.4511, 4.4448, 4.4379, 4.4327, 4.4309, 4.4321, 4.4349, 4.4377, 4.4399, 4.442, 4.4448, 4.4486, 4.4522, 4.4539, 4.4522, 4.4472, 4.4408, 4.4354, 4.4329, 4.4334, 4.4359, 4.4386, 4.4408, 4.4427, 4.4453, 4.4488, 4.4522, 4.4541, 4.4529, 4.4487, 4.4428, 4.4376, 4.4349, 4.4351, 4.4375, 4.4406, 4.4435, 4.4462, 4.4495, 4.4535, 4.4575, 4.4599, 4.459, 4.4544, 4.4477, 4.4413, 4.4374, 4.437, 4.439, 4.4419, 4.4444, 4.4464, 4.4489, 4.4525, 4.4568, 4.4603, 4.4609, 4.4575, 4.4508, 4.4432, 4.4374, 4.4351, 4.4362, 4.4392, 4.4424, 4.4448, 4.447, 4.4499, 4.454, 4.4584, 4.4614, 4.4612, 4.4571, 4.4504, 4.4437, 4.4395, 4.4389, 4.4411, 4.4445, 4.4475, 4.4498, 4.4521, 4.4551, 4.4591, 4.4629, 4.465, 4.4639, 4.4596, 4.4537, 4.4485, 4.4458, 4.446, 4.4482, 4.4509, 4.4532, 4.4554, 4.4582, 4.4621, 4.4661, 4.4682, 4.466, 4.4588, 4.4483, 4.4377, 4.4304, 4.4279, 4.4293, 4.4325, 4.4356, 4.4382, 4.4402, 4.4439, 4.4489, 4.4505, 4.4484, 4.4425, 4.4446, 4.4516};
        // double[] data={4.3836, 4.3785, 4.3774, 4.3796, 4.3829, 4.3857, 4.388, 4.3902, 4.3926, 4.3945, 4.3945, 4.3919, 4.3875, 4.3837, 4.3825, 4.385, 4.3899, 4.3952, 4.3992, 4.4016, 4.4032, 4.4048, 4.406, 4.4057, 4.403, 4.3979, 4.392, 4.3873, 4.3852, 4.3857, 4.3877, 4.3896, 4.3908, 4.3916, 4.3929, 4.3956, 4.399, 4.4015, 4.4014, 4.3981, 4.3925, 4.3869, 4.3835, 4.3829, 4.3845, 4.3869, 4.3889, 4.3903, 4.3918, 4.3941, 4.3972, 4.3999, 4.4007, 4.3985, 4.3933, 4.3867, 4.3809, 4.3777, 4.3775, 4.3794, 4.3817, 4.3833, 4.3844, 4.3859, 4.3888, 4.3928, 4.3963, 4.3973, 4.3947, 4.3896, 4.3844, 4.3819, 4.3831, 4.387, 4.3915, 4.3946, 4.3963, 4.3974, 4.3995, 4.4027, 4.4061, 4.4078, 4.4065, 4.4022, 4.3962, 4.3909, 4.3878, 4.3874, 4.389, 4.3912, 4.3933, 4.3954, 4.3981, 4.4014, 4.4046, 4.4064, 4.4056, 4.4019, 4.3967, 4.3919, 4.3892, 4.3889, 4.3904, 4.3924, 4.3942, 4.3958, 4.398, 4.4012, 4.405, 4.4083, 4.4095, 4.4079, 4.4039, 4.3989, 4.3949, 4.3932, 4.3938, 4.3959, 4.3982, 4.4, 4.4015, 4.4036, 4.4067, 4.4105, 4.4138, 4.415, 4.4132, 4.409, 4.404, 4.4001, 4.3985, 4.3991, 4.4009, 4.4028, 4.4043, 4.4056, 4.4073, 4.41, 4.4136, 4.4171, 4.4189, 4.4181, 4.4144, 4.4093, 4.4045, 4.4017, 4.4013, 4.4026, 4.4044, 4.4057, 4.4065, 4.4078, 4.4099, 4.413, 4.4158, 4.4169, 4.4153, 4.4112, 4.4059, 4.4015, 4.3993, 4.3993, 4.4007, 4.4021, 4.4031, 4.4041, 4.406, 4.4091, 4.4123, 4.4141, 4.4129, 4.4086, 4.4024, 4.3966, 4.3932, 4.3924, 4.3934, 4.3949, 4.3959, 4.3966, 4.3976, 4.3998, 4.4028, 4.4054, 4.4058, 4.403, 4.3973, 4.3903, 4.3844, 4.3811, 4.3807, 4.3821, 4.384, 4.3854, 4.3864, 4.388, 4.3908, 4.3948, 4.3987, 4.4005, 4.3989, 4.3939, 4.3873, 4.3815, 4.3785, 4.3786, 4.3807, 4.3832, 4.3851, 4.3865, 4.3884, 4.3913, 4.3952, 4.3986, 4.3999, 4.398, 4.3933, 4.3875, 4.3829, 4.3808, 4.3814, 4.3836, 4.3861, 4.3881, 4.39, 4.3923, 4.3954, 4.3987, 4.4006, 4.3999, 4.3962, 4.3906, 4.3853, 4.3821, 4.3817, 4.3833, 4.3856, 4.3875, 4.389, 4.3909, 4.3939, 4.3975, 4.4001, 4.3998, 4.3958, 4.3894, 4.3834, 4.3809, 4.3828, 4.388, 4.3939, 4.3984, 4.401, 4.4028, 4.4052, 4.4086, 4.4118, 4.4128, 4.4104, 4.4047, 4.3979, 4.3923, 4.3896, 4.3896, 4.3915, 4.3936, 4.3953, 4.3969, 4.3992, 4.403, 4.4078, 4.4119, 4.4132, 4.4104, 4.404, 4.3963, 4.39, 4.3871, 4.3877, 4.3903, 4.3931, 4.3954, 4.3975, 4.4005, 4.4049, 4.41, 4.4138, 4.4143, 4.4106, 4.4037, 4.3964, 4.3914, 4.3901, 4.3912, 4.3946, 4.3983, 4.3993, 4.3996, 4.4011, 4.4141, 4.4319};
//double[] data={4.3715, 4.3776, 4.3818, 4.3827, 4.3798, 4.3741, 4.3677, 4.363, 4.3612, 4.3618, 4.3635, 4.3649, 4.3654, 4.3658, 4.367, 4.3695, 4.3722, 4.3732, 4.3711, 4.3662, 4.3602, 4.356, 4.3554, 4.3582, 4.3627, 4.3665, 4.3684, 4.3692, 4.3705, 4.3736, 4.3781, 4.382, 4.3827, 4.3787, 4.3711, 4.3632, 4.3586, 4.359, 4.3636, 4.3695, 4.3744, 4.3775, 4.3799, 4.3832, 4.3874, 4.3908, 4.3909, 4.386, 4.3771, 4.3671, 4.3596, 4.3566, 4.3577, 4.3609, 4.3641, 4.3665, 4.369, 4.3726, 4.3772, 4.3809, 4.3811, 4.3763, 4.3676, 4.3585, 4.3532, 4.3536, 4.3589, 4.366, 4.3717, 4.3749, 4.3769, 4.3799, 4.385, 4.391, 4.3951, 4.3945, 4.3884, 4.3787, 4.3694, 4.3637, 4.3629, 4.3657, 4.3696, 4.3727, 4.375, 4.3775, 4.3816, 4.387, 4.3919, 4.3937, 4.3906, 4.3832, 4.3743, 4.3673, 4.3645, 4.3658, 4.3693, 4.3727, 4.3752, 4.3774, 4.3807, 4.3856, 4.3903, 4.3922, 4.3894, 4.382, 4.3727, 4.3651, 4.3618, 4.3628, 4.3664, 4.3701, 4.3727, 4.3747, 4.3776, 4.382, 4.3867, 4.3893, 4.3874, 4.3804, 4.3704, 4.361, 4.3554, 4.3548, 4.3579, 4.3623, 4.3661, 4.3688, 4.3717, 4.376, 4.3819, 4.3875, 4.3903, 4.3878, 4.3801, 4.3698, 4.3606, 4.3558, 4.3559, 4.3594, 4.3638, 4.3673, 4.3699, 4.3728, 4.3775, 4.3836, 4.3892, 4.3914, 4.3882, 4.3799, 4.3693, 4.3607, 4.3568, 4.3579, 4.3623, 4.3671, 4.3707, 4.3733, 4.3763, 4.3806, 4.3854, 4.3883, 4.3871, 4.3811, 4.3723, 4.3641, 4.3598, 4.3602, 4.3639, 4.3684, 4.3718, 4.3744, 4.3776, 4.3825, 4.388, 4.3916, 4.3905, 4.3838, 4.3736, 4.3638, 4.3579, 4.3574, 4.3608, 4.3655, 4.3694, 4.3722, 4.375, 4.3792, 4.3846, 4.3893, 4.3906, 4.3866, 4.3779, 4.3673, 4.3588, 4.3548, 4.3558, 4.36, 4.3646, 4.3683, 4.3711, 4.3742, 4.3788, 4.3846, 4.3893, 4.3902, 4.3859, 4.3772, 4.3672, 4.3599, 4.3574, 4.3595, 4.364, 4.3682, 4.3712, 4.3737, 4.3771, 4.3821, 4.3876, 4.3911, 4.3902, 4.3844, 4.3756, 4.3672, 4.3624, 4.3622, 4.3656, 4.3701, 4.3741, 4.3772, 4.3806, 4.385, 4.3897, 4.393, 4.3927, 4.3878, 4.3796, 4.3711, 4.3654, 4.364, 4.3661, 4.3698, 4.3733, 4.3763, 4.3795, 4.384, 4.3896, 4.3943, 4.3956, 4.3916, 4.3831, 4.3729, 4.3649, 4.3616, 4.3629, 4.3669, 4.3713, 4.3748, 4.3778, 4.3816, 4.3868, 4.3925, 4.3963, 4.3957, 4.39, 4.3807, 4.3712, 4.3649, 4.3632, 4.3654, 4.3695, 4.3734, 4.3766, 4.3799, 4.3842, 4.3897, 4.3952, 4.3984, 4.3972, 4.3916, 4.3833, 4.3756, 4.3712, 4.3711, 4.3742, 4.3785, 4.3822, 4.3851, 4.3881, 4.3924, 4.3978, 4.4028, 4.4053, 4.4029, 4.3974, 4.3909, 4.3836, 4.3788, 4.3778, 4.3896, 4.4071};// double[] data={4.4661, 4.4701, 4.4743, 4.4769, 4.4776, 4.4777, 4.479, 4.4822, 4.4861, 4.4885, 4.4875, 4.483, 4.4771, 4.4727, 4.4721, 4.4754, 4.4807, 4.4857, 4.4887, 4.49, 4.4912, 4.4937, 4.4978, 4.5018, 4.5034, 4.5011, 4.4951, 4.4874, 4.4811, 4.4782, 4.4786, 4.4808, 4.4831, 4.4847, 4.4863, 4.4887, 4.4923, 4.4954, 4.4958, 4.492, 4.4843, 4.4752, 4.4681, 4.4649, 4.4656, 4.4684, 4.4713, 4.4733, 4.4751, 4.4781, 4.4825, 4.4868, 4.4881, 4.4845, 4.4764, 4.4669, 4.4606, 4.4602, 4.4653, 4.4729, 4.4796, 4.4834, 4.4853, 4.4874, 4.4911, 4.496, 4.4995, 4.499, 4.4933, 4.4839, 4.4745, 4.4685, 4.4676, 4.471, 4.4759, 4.4802, 4.4828, 4.4849, 4.4879, 4.4924, 4.4972, 4.4995, 4.4973, 4.4902, 4.4807, 4.4725, 4.4688, 4.47, 4.4745, 4.4794, 4.4828, 4.4847, 4.4866, 4.4899, 4.494, 4.4968, 4.4962, 4.491, 4.4828, 4.475, 4.4705, 4.4704, 4.4735, 4.4775, 4.4806, 4.4825, 4.4848, 4.4886, 4.4936, 4.4974, 4.4974, 4.4922, 4.483, 4.4734, 4.4672, 4.4661, 4.4692, 4.474, 4.4781, 4.4809, 4.4835, 4.4871, 4.4918, 4.4955, 4.4958, 4.4911, 4.4824, 4.4727, 4.4659, 4.464, 4.4665, 4.4712, 4.4756, 4.4784, 4.4803, 4.483, 4.4874, 4.4927, 4.4965, 4.4959, 4.4901, 4.4806, 4.4712, 4.4657, 4.4654, 4.4691, 4.4741, 4.4781, 4.4807, 4.4833, 4.487, 4.4915, 4.4945, 4.4935, 4.4875, 4.4783, 4.4697, 4.465, 4.4653, 4.4691, 4.4738, 4.4775, 4.4804, 4.4837, 4.4881, 4.4925, 4.4942, 4.4911, 4.4835, 4.4738, 4.4662, 4.4632, 4.465, 4.4696, 4.4744, 4.4779, 4.4806, 4.484, 4.4887, 4.4935, 4.4956, 4.4926, 4.4844, 4.4737, 4.4649, 4.4612, 4.4633, 4.4691, 4.4752, 4.4797, 4.4822, 4.4846, 4.4884, 4.4937, 4.4984, 4.4998, 4.496, 4.4875, 4.4775, 4.4702, 4.468, 4.4709, 4.4765, 4.4818, 4.4852, 4.4873, 4.4899, 4.4946, 4.5007, 4.5058, 4.5067, 4.5017, 4.4918, 4.4811, 4.474, 4.4729, 4.4767, 4.4825, 4.4872, 4.4898, 4.4916, 4.4949, 4.5, 4.5052, 4.507, 4.5031, 4.4937, 4.4824, 4.474, 4.4715, 4.4746, 4.4806, 4.4859, 4.489, 4.4907, 4.4934, 4.4982, 4.5042, 4.5081, 4.5068, 4.4993, 4.4879, 4.4772, 4.4713, 4.4717, 4.4766, 4.4829, 4.4877, 4.4906, 4.493, 4.4969, 4.5028, 4.5086, 4.5109, 4.5071, 4.4972, 4.485, 4.4755, 4.4722, 4.4754, 4.4821, 4.4884, 4.4923, 4.4942, 4.4966, 4.5013, 4.5077, 4.5132, 4.5146, 4.51, 4.5007, 4.4905, 4.4835, 4.4819, 4.4851, 4.4903, 4.4948, 4.4976, 4.4999, 4.5032, 4.5079, 4.5122, 4.5133, 4.5094, 4.5011, 4.4917, 4.4851, 4.4834, 4.4863, 4.4913, 4.4959, 4.4989, 4.5014, 4.5043, 4.5097, 4.5161, 4.5179, 4.5139, 4.5048, 4.504, 4.5097};
        //double [] data={4.4278, 4.423, 4.4143, 4.4044, 4.3968, 4.3936, 4.3943, 4.397, 4.3998, 4.4017, 4.4036, 4.4067, 4.4118, 4.4188, 4.4257, 4.4299, 4.4286, 4.421, 4.4089, 4.396, 4.3862, 4.3813, 4.3808, 4.3824, 4.3843, 4.386, 4.3879, 4.3908, 4.3947, 4.3998, 4.4058, 4.412, 4.4162, 4.4159, 4.4095, 4.3978, 4.3845, 4.3744, 4.3702, 4.3714, 4.3754, 4.3794, 4.3821, 4.3841, 4.3865, 4.3901, 4.3946, 4.4003, 4.407, 4.4138, 4.4183, 4.4172, 4.4089, 4.395, 4.3804, 4.3704, 4.3679, 4.3717, 4.3777, 4.3826, 4.385, 4.3861, 4.3877, 4.3913, 4.397, 4.404, 4.4103, 4.4135, 4.4114, 4.4035, 4.3919, 4.3805, 4.3731, 4.3712, 4.3735, 4.3771, 4.38, 4.382, 4.3838, 4.3871, 4.3925, 4.4, 4.4083, 4.4145, 4.4156, 4.4093, 4.3966, 4.3819, 4.3706, 4.3667, 4.3699, 4.377, 4.3838, 4.3884, 4.391, 4.3938, 4.3982, 4.4046, 4.4122, 4.4197, 4.4246, 4.4241, 4.4166, 4.4028, 4.3865, 4.3731, 4.3668, 4.3679, 4.3735, 4.3795, 4.3835, 4.3857, 4.3876, 4.3907, 4.3953, 4.4012, 4.4083, 4.4161, 4.4225, 4.4239, 4.4173, 4.403, 4.3852, 4.371, 4.3653, 4.3682, 4.3759, 4.3836, 4.3884, 4.3907, 4.3924, 4.3955, 4.4005, 4.4073, 4.4144, 4.4199, 4.4212, 4.4168, 4.4072, 4.3956, 4.3864, 4.3824, 4.3836, 4.3877, 4.3918, 4.3947, 4.3967, 4.3997, 4.405, 4.413, 4.4223, 4.4303, 4.433, 4.4275, 4.414, 4.3962, 4.3803, 4.3718, 4.3723, 4.379, 4.3873, 4.3936, 4.3972, 4.3995, 4.4024, 4.4069, 4.413, 4.42, 4.4265, 4.43, 4.4277, 4.4179, 4.402, 4.3848, 4.3722, 4.3679, 4.3713, 4.3786, 4.3855, 4.3897, 4.3919, 4.394, 4.3976, 4.403, 4.41, 4.4175, 4.4241, 4.4269, 4.4235, 4.4128, 4.3973, 4.3822, 4.373, 4.3722, 4.378, 4.3859, 4.3918, 4.3947, 4.3959, 4.3979, 4.4023, 4.4089, 4.4167, 4.4235, 4.427, 4.425, 4.4166, 4.4034, 4.3892, 4.3784, 4.3736, 4.3747, 4.3789, 4.3834, 4.3869, 4.3897, 4.3929, 4.3976, 4.4042, 4.4121, 4.4196, 4.4237, 4.4214, 4.4117, 4.3971, 4.3832, 4.3753, 4.3758, 4.3825, 4.3908, 4.3971, 4.4005, 4.4026, 4.4055, 4.4104, 4.4169, 4.424, 4.4301, 4.433, 4.43, 4.4199, 4.4041, 4.3872, 4.3751, 4.3715, 4.3757, 4.3837, 4.3909, 4.3954, 4.3979, 4.4007, 4.4054, 4.4118, 4.419, 4.4259, 4.4313, 4.4327, 4.4278, 4.416, 4.3997, 4.3842, 4.3751, 4.3748, 4.3813, 4.3898, 4.3962, 4.3992, 4.4003, 4.4018, 4.4057, 4.4124, 4.4207, 4.4281, 4.4309, 4.4264, 4.4142, 4.398, 4.3838, 4.3768, 4.3779, 4.3842, 4.3911, 4.3955, 4.3974, 4.3989, 4.4022, 4.4083, 4.4165, 4.425, 4.4304, 4.4294, 4.42, 4.4038, 4.3849, 4.3713, 4.367, 4.369, 4.3747, 4.3802, 4.3935, 4.4098};
//double[] data={4.3538, 4.3587, 4.3647, 4.3703, 4.3731, 4.3717, 4.3663, 4.3588, 4.3521, 4.3481, 4.3468, 4.3471, 4.3474, 4.3475, 4.3483, 4.3512, 4.3559, 4.3606, 4.3626, 4.36, 4.3532, 4.3448, 4.338, 4.3347, 4.3349, 4.3368, 4.339, 4.3411, 4.3441, 4.3486, 4.3541, 4.3582, 4.3585, 4.354, 4.3458, 4.337, 4.3306, 4.3283, 4.3293, 4.3319, 4.3343, 4.3364, 4.3389, 4.3429, 4.348, 4.3523, 4.3533, 4.3496, 4.3422, 4.3341, 4.3291, 4.329, 4.3333, 4.3393, 4.3445, 4.3478, 4.3499, 4.3526, 4.3568, 4.3619, 4.3658, 4.366, 4.3617, 4.3538, 4.3454, 4.3395, 4.3374, 4.3387, 4.3414, 4.3441, 4.346, 4.3482, 4.3516, 4.3565, 4.3617, 4.3648, 4.3639, 4.3587, 4.351, 4.3436, 4.3389, 4.3378, 4.3392, 4.3416, 4.344, 4.3466, 4.3503, 4.3554, 4.3609, 4.3645, 4.3643, 4.3597, 4.352, 4.3443, 4.3392, 4.3378, 4.3392, 4.3418, 4.3443, 4.3465, 4.3496, 4.354, 4.3589, 4.3623, 4.3619, 4.357, 4.349, 4.341, 4.3359, 4.3349, 4.337, 4.3403, 4.3433, 4.3456, 4.3483, 4.3524, 4.3577, 4.3626, 4.3645, 4.3618, 4.3546, 4.3454, 4.3376, 4.3334, 4.3332, 4.3356, 4.3386, 4.3412, 4.3436, 4.3467, 4.3513, 4.3569, 4.3614, 4.3628, 4.3597, 4.3526, 4.3439, 4.3366, 4.333, 4.3332, 4.3357, 4.3388, 4.3413, 4.3434, 4.3461, 4.3504, 4.3561, 4.3614, 4.364, 4.3622, 4.3561, 4.3477, 4.3403, 4.3364, 4.3362, 4.3384, 4.3412, 4.3434, 4.3456, 4.3488, 4.3535, 4.3585, 4.3616, 4.361, 4.3561, 4.3486, 4.3413, 4.3368, 4.3358, 4.3375, 4.34, 4.3422, 4.3442, 4.347, 4.3514, 4.3566, 4.3607, 4.3612, 4.3573, 4.3498, 4.3415, 4.3354, 4.333, 4.334, 4.3367, 4.3394, 4.3417, 4.3442, 4.3478, 4.3526, 4.3575, 4.3604, 4.3592, 4.3538, 4.3456, 4.3376, 4.3326, 4.3314, 4.3333, 4.3365, 4.3396, 4.3422, 4.3453, 4.3495, 4.3546, 4.3588, 4.3599, 4.3567, 4.3495, 4.341, 4.3339, 4.3306, 4.331, 4.3339, 4.3373, 4.3401, 4.3424, 4.3452, 4.3494, 4.3546, 4.3593, 4.3611, 4.3585, 4.3518, 4.3432, 4.3361, 4.3324, 4.3325, 4.3347, 4.3374, 4.3396, 4.3419, 4.3454, 4.3503, 4.3551, 4.3577, 4.3561, 4.3504, 4.3424, 4.3354, 4.3318, 4.3319, 4.3344, 4.3374, 4.3398, 4.3421, 4.3454, 4.3504, 4.3556, 4.3586, 4.3574, 4.3516, 4.3434, 4.3359, 4.3319, 4.3318, 4.3344, 4.3375, 4.34, 4.3421, 4.3451, 4.3496, 4.3552, 4.3598, 4.361, 4.3575, 4.3502, 4.3417, 4.3352, 4.3325, 4.3331, 4.3356, 4.3384, 4.341, 4.344, 4.3482, 4.353, 4.3565, 4.3567, 4.3529, 4.346, 4.3387, 4.3336, 4.3319, 4.3329, 4.3352, 4.3376, 4.34, 4.343, 4.3473, 4.3519, 4.3552, 4.3554, 4.351, 4.3447, 4.3388, 4.3328, 4.3291, 4.3282, 4.339, 4.3554};
        //double[] data={4.0063, 4.0134, 4.0282, 4.0469, 4.0629, 4.0701, 4.0648, 4.0471, 4.0208, 3.9927, 3.97, 3.9578, 3.9569, 3.9641, 3.9738, 3.9813, 3.9849, 3.9856, 3.9857, 3.9869, 3.9891, 3.9914, 3.993, 3.9939, 3.9947, 3.9955, 3.9961, 3.9957, 3.9938, 3.9907, 3.9873, 3.9848, 3.9839, 3.9844, 3.9857, 3.9871, 3.9885, 3.9898, 3.9911, 3.9925, 3.9937, 3.9947, 3.9956, 3.9966, 3.9977, 3.9983, 3.998, 3.9961, 3.993, 3.9895, 3.9866, 3.9851, 3.985, 3.9857, 3.9868, 3.9878, 3.9888, 3.9898, 3.9909, 3.992, 3.9931, 3.9946, 3.9964, 3.9985, 4.0002, 4.0007, 3.9995, 3.9965, 3.9926, 3.989, 3.9865, 3.9856, 3.9859, 3.9867, 3.9875, 3.9881, 3.9885, 3.989, 3.9898, 3.9907, 3.9915, 3.9923, 3.993, 3.9939, 3.9951, 3.996, 3.9959, 3.9944, 3.9914, 3.9878, 3.9845, 3.9823, 3.9814, 3.9814, 3.9818, 3.9822, 3.9825, 3.983, 3.9835, 3.9842, 3.9848, 3.9857, 3.9867, 3.9876, 3.988, 3.9873, 3.9853, 3.9825, 3.9796, 3.9774, 3.9762, 3.9758, 3.9758, 3.9759, 3.9762, 3.9767, 3.9776, 3.9787, 3.9798, 3.9807, 3.9814, 3.9823, 3.9836, 3.9848, 3.9855, 3.985, 3.983, 3.98, 3.9768, 3.9742, 3.9725, 3.9718, 3.9715, 3.9715, 3.9717, 3.9723, 3.9733, 3.9745, 3.9759, 3.9771, 3.9784, 3.9797, 3.981, 3.9822, 3.9828, 3.9822, 3.9806, 3.9782, 3.9759, 3.9742, 3.9734, 3.9732, 3.9733, 3.9735, 3.9736, 3.9739, 3.9744, 3.975, 3.9757, 3.9765, 3.9774, 3.978, 3.9783, 3.9778, 3.9765, 3.9746, 3.9727, 3.9714, 3.9708, 3.9708, 3.9711, 3.9712, 3.9714, 3.971, 3.9716, 3.9728, 3.9722, 3.971, 3.97, 3.9788, 3.9923};
        // double[] data={ 3.919, 3.9193, 3.9201, 3.9215, 3.9231, 3.9237, 3.9223, 3.9189, 3.9143, 3.9101, 3.9074, 3.9066, 3.907, 3.9078, 3.9084, 3.9089, 3.9098, 3.9113, 3.9136, 3.9165, 3.9195, 3.922, 3.9228, 3.9215, 3.9179, 3.9131, 3.9083, 3.9048, 3.903, 3.9026, 3.9031, 3.9039, 3.9049, 3.9061, 3.9076, 3.9095, 3.9119, 3.9147, 3.9174, 3.9191, 3.919, 3.9168, 3.9129, 3.9086, 3.9051, 3.9032, 3.9029, 3.9038, 3.9051, 3.9065, 3.908, 3.9096, 3.9114, 3.9136, 3.9161, 3.9188, 3.9211, 3.9223, 3.9216, 3.9192, 3.9157, 3.9122, 3.9099, 3.9091, 3.9095, 3.9107, 3.912, 3.9133, 3.9147, 3.9162, 3.9181, 3.9205, 3.9232, 3.9257, 3.9271, 3.9269, 3.9249, 3.9216, 3.9183, 3.9161, 3.9153, 3.9158, 3.9168, 3.9179, 3.9187, 3.9194, 3.9202, 3.9213, 3.9229, 3.9249, 3.9268, 3.9281, 3.9272, 3.9255, 3.923, 3.9181, 3.9133, 3.9098, 3.9173, 3.9305};
        int[] loc = FindPeaks.findPeaks1(data, data.length);//loc为极小值位置,这里是用于切割独立波的，但是要是想实时显示的话，这部分得在安卓写，可能和你实时显示心率的非常相似，应该不难
        for (int k = 1; k < loc.length - 1; k++) {

            double[] onewave = cut(data, loc[k], loc[k + 1]);//注意！！如果要实时显示的话，这里你要检测出来最低值（我这里是切割成独立波了，但这并不符合实时要求），
            //也就是在安卓端分割成独立波，这部分的代码我真的不会写，如果要实时显示血压值的话，从此部分以下是你安卓端的核心代码。有疑问打电话。
//    	double[] onewave=new double[onewave1.length];
//    	for (int z=0;z<onewave.length;z++){
//    		System.out.println(onewave[z]);  
//    	}
//    	
            double[] newonewave = newdata(onewave);//插值成10个

            int[] loc2 = FindPeaks.findPeaks(newonewave, newonewave.length);//找到每一个独立波的顶点


            double[] downwave = cut(newonewave, 0, loc2[0]);
            double[] upwave = cut(newonewave, loc2[0] + 1, newonewave.length - 1);
            int SUT = upwave.length;
            System.out.println(SUT);
            double minupwave = min(upwave);
            double[] newupwave = new double[upwave.length];
            for (int z = 0; z < upwave.length; z++) {
                newupwave[z] = (upwave[z] - minupwave);
            }

            int DT = downwave.length;
            System.out.println(DT);
            double mindownwave = min(downwave);
            double[] newdownwave = new double[downwave.length];
            for (int z = 0; z < downwave.length; z++) {
                newdownwave[z] = (downwave[z] - mindownwave);
            }
            double shigh = newupwave[upwave.length - 1] - newupwave[0];
//      	  System.out.println(shigh);  
            int sw10 = cutlength(newupwave, 0.1 * shigh);
            int sw25 = cutlength(newupwave, 0.25 * shigh);
            int sw33 = cutlength(newupwave, 0.33 * shigh);
            int sw50 = cutlength(newupwave, 0.5 * shigh);
            int sw66 = cutlength(newupwave, 0.66 * shigh);
            int sw75 = cutlength(newupwave, 0.75 * shigh);


            double dhigh = newdownwave[downwave.length - 1] - newdownwave[0];
            //System.out.println(dhigh);
            double dw10 = cutlength(newdownwave, 0.1 * dhigh);
            double dw25 = cutlength(newdownwave, 0.25 * dhigh);
            double dw33 = cutlength(newdownwave, 0.33 * dhigh);
            double dw50 = cutlength(newdownwave, 0.5 * dhigh);
            double dw66 = cutlength(newdownwave, 0.66 * dhigh);
            double dw75 = cutlength(newdownwave, 0.75 * dhigh);
            double sdw10 = sw10 + dw10;
            double dsdw10 = dw10 / sw10;
            double sdw25 = sw25 + dw25;
            double dsdw25 = dw25 / sw25;
            double sdw33 = sw33 + dw33;
            double dsdw33 = dw33 / sw33;
            double sdw50 = sw50 + dw50;
            double dsdw50 = dw50 / sw50;
            double sdw66 = sw66 + dw66;
            double dsdw66 = dw66 / sw66;
            double sdw75 = sw75 + dw75;
            double dsdw75 = dw75 / sw75;
            double[] index = new double[21];
            index[0] = SUT;
            index[1] = DT;
            index[2] = sw10;
            index[3] = sdw10;
            index[4] = dsdw10;
            index[5] = sw25;
            index[6] = sdw25;
            index[7] = dsdw25;
            index[8] = sw33;
            index[9] = sdw33;
            index[10] = dsdw33;
            index[11] = sw50;
            index[12] = sdw50;
            index[13] = dsdw50;
            index[14] = sw66;
            index[15] = sdw66;
            index[16] = dsdw66;
            index[17] = sw75;
            index[18] = sdw75;
            index[19] = dsdw75;
            index[20] = 1;
            double[] highlinear = {-0.106291632318809, 0.440135822347136, 2.26412336063126, -0.945096557335864, 5.55048022570086, -1.95848521366160, 0.727239762682463, 0.384640299276890, 0.223756874711433, 0.194462534646061, -1.63993743910614, 0.588447829363399, -0.520679883552572, -1.74390991356047, -1.03470469426261, 0.725603505520589, -1.10511143681526, -0.163371306288256, 0.385960128855660, 0.643963255667936, 87.4003998735004};
            double[] lowlinear = {-0.0228185025438654, 0.0197559692095977, 0.376076212611421, -0.130593157447337, 0.592049737961628, -0.621088800086177, 0.247961012239381, -0.961037232163176, 0.286134765052155, 0.0483069292695312, 0.951326360032127, 0.0788543127840275, -0.333038526874407, -1.24893285194401, -0.46876892764937,
                    0.276112935855854, -0.172392660080931, 0.349392942573542, 0.0717608379672764, 1.59613009057844, 58.0371315813033};
            double highbp = 0;
            double lowbp = 0;
            for (int i = 0; i < 21; i++) {
                //System.out.println(index[i]);
                highbp = highbp + index[i] * highlinear[i];
                lowbp = lowbp + index[i] * lowlinear[i];
            }
            Log.e("high pressure", highbp + "");
            Log.e("low pressure", lowbp + "");
            hBPList.add(highbp);
            lBPList.add(lowbp);
            //double[] mapindex=mapminmax(index);
//          double[][] finalindex=new double[18][1];
//        //finalindex[0][0]=1;
//          for(int i=0;i<18;i++){
//        	finalindex[i][0]=mapindex[i];
//          }
//          Matrix Index=Matrix.constructWithCopy(finalindex);//把指标转换成矩阵
//      
//		
//	        
//          double[] result=fitnet.fitnnet(Index);//resulet存着结果[0]是高压[1]是低压
        }
        // 去掉高压计算中过低和过高的数值
        double highBloodPressureAver = MathUtil.getAverage(hBPList);
        double lowBloodPressureAver = MathUtil.getAverage(lBPList);
        for (int i = hBPList.size() - 1; i >= 0; i--) {
//            if (Math.abs(hBPList.get(i) - highBloodPressureAver) > highBloodPressureAver * 0.2) {
            if (hBPList.get(i) < 80 || hBPList.get(i) > 180) {
                lBPList.remove(i);
                hBPList.remove(i);
            }
        }
        return new int[]{(int) MathUtil.getAverage(hBPList), (int) MathUtil.getAverage(lBPList)};
    }


    public static double sum(double[] data, int s, int e) {//求和
        double sum = 0.0;
        for (int i = s; i <= e; i++) {
            sum = sum + data[i];
        }
        return sum;
    }

    public static double[] cut(double[] data, int start, int end) {//截取
        double[] cut = new double[end - start + 1];
        for (int i = start; i <= end; i++) {
            cut[i - start] = data[i];
            //System.out.println(data[i]);
        }
        return cut;
    }

    public static int cutlength(double[] data, double minvalue) {//截取，截取小于minvalue的长度
        int cutlength = 0;
        for (int i = 0; i < data.length; i++) {
            if (data[i] > minvalue) {
                cutlength = cutlength + 1;
            }
            //System.out.println(data[i]);
        }
        return cutlength;
    }


    public static double[] diff(double[] data) {//差值，diff
        double[] diff = new double[data.length - 1];
        for (int i = 0; i < data.length - 1; i++) {
            diff[i] = data[i + 1] - data[i];
        }
        return diff;
    }

    public static double max(double[] arr) {
        double max = arr[0];
        for (int i = 0; i < arr.length; i++) {
            if (arr[i] > max) {
                max = arr[i];
            }
        }
        return max;
    }

    public static double min(double[] arr) {
        double min = arr[0];
        for (int i = 0; i < arr.length; i++) {
            if (arr[i] < min) {
                min = arr[i];
            }
        }
        return min;
    }

    public static double[] mapminmax(double[] data) {//差值，diff
        double[] map = new double[data.length];
        double max = max(data);
        double min = min(data);
        for (int i = 0; i < data.length; i++) {
            map[i] = 2 * ((data[i] - min) / (max - min)) - 1;

        }
        return map;
    }

    public static double[] newdata(double[] data) {//插值，用于补偿手机和开源网站中数据的采集频率差的问题
        List<Point> points = new ArrayList<Point>();
        for (int j = 0; j < data.length; j++) {

            points.add(new Point(j, (int) (data[j] * 100000)));//points是point（int，int）格式数据，所以把纵坐标加大

        }
        BasicSpline spline = new BasicSpline();//spline插值方法，结果用spline.getPoint得到，在第二个循环
        if (points.size() > 2) {//检验必须有两个点（不然不能进行插值计算）
            for (Point p : points) {
                spline.addPoint(p);
            }
            spline.calcSpline();
        }
        int newlength = data.length * (125 / 30);

        double step = (1.0 / newlength);

        System.out.println(newlength);
        double[] originaldata = new double[newlength + 1];//定义新的插值后数据
        if (points.size() > 2) {
            int i = 0;
            for (float f = 0; f <= 1; f += step) {//把原来几个个值经过插值计算变成10个值，其实就是使得曲线更平滑，相当于一个重采样（但是这个重采样更接近曲线本身）
                Point px = spline.getPoint(f);
                double y = px.y;
                originaldata[i] = y / 100000;
                i = i + 1;
            }
        }
        return originaldata;
    }
}

